形式言語とオートマトン
======================

言語の階層 (`3.1.4 句構造文法の4つの型`_)

- L3 (正規言語) ⊊ L2.5 ⊊ L2 (CFL) --- `3.2.2 線形文法 \*`_
- L2 (CFL) ⊊ L1 (CSL)

  - AnBnCn ∉ CFL: `3.6.2 ポンプの補題の応用と拡張`_
  - AnBnCn' ∈ CSL: `4.1.3 線形有界オートマトン`_

- L1 ⊊ L0.5 (`5.3.1 準同型写像による特徴付け`_)
- L0.5 ⊊ L0 (`5.2.1 帰納的言語と帰納的可算言語`_)

言語とオートマトンの対応

- 正規集合とFAによって受理される言語は等しい: `2.4.4 FA → 正規表現`_
- `3.5.6 NPDA = CFG`_
- `4.1.4 CSG = NLBA`_
- L0 = L(NTM) = L(DTM): `5.1.3 Chomosky 階層と計算量`_

決定性オートマトンと非決定性オートマトンの関係

- 有限オートマトン: `2.3.2 NFA は DFA を超えない`_ (等価)
- プッシュダウンオートマトン: `3.5.3 DPDA: 決定性 PDA`_ (DPDA < NPDA)
- 線形有界オートマトン: `4.2.2 閉包性`_ (未解決)
- チューリングマシン: `5.1.3 Chomosky 階層と計算量`_ (等価)


はじめの一歩
------------

1.1 オートマトンと形式言語
^^^^^^^^^^^^^^^^^^^^^^^^^^

...

1.2 道具としての数学
^^^^^^^^^^^^^^^^^^^^

1.2.4 関係
''''''''''

============================================ ==================================
R の同値類 (equivalence class)               [x]_R := { y ∈ X | xRy }
R の同値類すべての集合                       X/R := {[x]_R |  y ∈ X }
R の指数 (index)                             \| X / R \|
推移閉包 (transitive closure)                (i) xRy ⇒ xR^+y
                                             (ii) xR^+y ∧ yRz ⇒ xR^+z
反射推移閉包 (reflexive transitive closure)  (i) ∀x ∈ X: xR^*x
                                             (ii) xR^+y ⇒ xR^*y
R1 は R2 の 細分 (refinement)                R1 のどの同値類も R2 のどれかの
                                             同値類の部分集合である
============================================ ==================================

R^* = R^+ ∪ {(x,x) | x ∈ X}


有限オートマトン
----------------

2.1 記号・語・言語
^^^^^^^^^^^^^^^^^^

.. list-table:: Σ 上の言語 L, L' に対する演算
   :header-rows: 1

   * - 名前
     - 定義
   * - **連結**, 積, product
     - :math:`L \cdot L' := \{ x \cdot y | x \in L, y \in L'\}`
   * - **n乗**
     - :math:`L^0 := {\epsilon}`,
       :math:`L^n := L \cdot L^{n-1} (n > 0)`
   * - **反転**, 鏡像
     - :math:`L \cdot L' := \{ x^R | x \in L \}`
   * - **Kleene 閉包**, Kleene closure
     - :math:`L^* := \bigcup_{n \ge 0} L^n`
   * - **正閉包**, positive closure
     - :math:`L^+ := \bigcup_{n \ge 1} L^n`


2.2 有限オートマトンと状態遷移グラフ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2.2.1 有限オートマトンによる計算とは
''''''''''''''''''''''''''''''''''''

有限オートマトン (finite automaton, FA)
    M = (Q, Σ, δ, q0, F)
    = (Q={状態}, Σ={入力}, δ=状態遷移関数, q0=初期状態, F={最終状態})

    (1) Q: 有限のアルファベット; 状態 (state) q ∈ Q
    (2) Σ: 有限のアルファベット; 入力記号 (input symbol) a ∈ Σ
    (3) δ: Q x Σ → Q; 状態遷移関数 (state transition function)
    (4) q0 ∈ Q: 初期状態 (initial state)
    (5) F ⊂ Q; 最終状態 (final state) f ∈ F


2.3 非決定性有限オートマトン
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2.3.2 NFA は DFA を超えない
'''''''''''''''''''''''''''
定理 2.4
    任意の NFA M に対し，それと等価な DFA M' が存在する．


2.4 正規表現と有限オートマトン
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2.4.4 FA → 正規表現
''''''''''''''''''''
定理 2.7
    正規集合とFAによって受理される言語は等しい

2.8 有限オートマトンとの限界
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2.8.1 ポンプの補題
''''''''''''''''''

ポンプの補題 (定理 2.17)
    L が正規集合なら，次の条件を満たす正整数 n が存在する:
    x ∈ L, | x | >= n なら x は x = uvw (| uvw | <= n, | n | >= 1)
    と分解でき，任意の i >= 0 に対して uv^iw ∈ L である．

例 2.15 ポンプの補題の応用

(1) 言語 AnBn := {a^n b^n | n >= 0} は正規集合ではない
(2) 言語 Lsqr := {a^{n^2} | n >= 0} は正規集合ではない


文脈自由言語
------------

3.1 形式文法事始め
^^^^^^^^^^^^^^^^^^

3.1.3 句構造文法
''''''''''''''''

句構造文法 (phrase-structure grammar, PSG)
    G = (V_N, V_T, P, S)
    = (V_N=非終端記号, V_T=終端記号, P=プロダクション, S=文記号)

    (1) V_N: 非終端記号 (nonterminal symbol) - 空でない有限のアルファベット
    (2) V_T: 終端記号 (terminal symbol) -
        空でない有限のアルファベットで V_N と互いに素
    (3) P: 書き換え規則 (rewriting rule) / プロダクション (production)
          - V^* V_N V^* x V^* の有限部分集合
          - (u, v) ∈ P: u を v に書き換える
          - u → v とも書く
    (4) S ∈ V_N: 文記号 (sentence symbol) / 開始記号 (start symbols)

プロダクション u → v によって文字列 α = βuγ を α' = βvγ に書き換えることを

.. math::

   \alpha \underset{G}{\overset{\pi}{\Rightarrow}} \alpha'
.. α ⇒*_G α'

と書く。 G と π は省略可能。

句構造言語 (phrase-structure language)
    L(G) := {x ∈ V^*_T | S ⇒^* x}


3.1.4 句構造文法の4つの型
'''''''''''''''''''''''''

= =========== ========================== ======================================
i Production  Grammar
= =========== ========================== ======================================
0 制限なし
1 aXb -> agb  文脈依存文法,              X ∈ V_N, a,b ∈ V^*, g ∈ V^+
              context-sensitive grammar,
              CSL
2 X -> a      文脈自由文法               X ∈ V_N, a ∈ V^*
              context-free grammar
              CFL
3 X -> xY or  右線形文法,                X,Y ∈ V_N, x ∈ V_T^*
  X -> x      right-linear grammar,
              RLG
= =========== ========================== ======================================

0型文法の他の定義:

(1) α → β      (α, β ∈ V^*)
(2) α → β      (α ∈ V_N^+, β ∈ V^*)
(3) αXβ → αγβ  (α, β ∈ V^*, X ∈ V_N, γ ∈ V^*)

1型文法の他の定義:

(4) α → β      (α, β ∈ V^+, | α | <= | β | )   ... 単調文法
(5) αXβ → αγβ  (α, β ∈ V^*, X ∈ V_N, γ ∈ V^+)


3.2 {左|右| }線形文法 \*
^^^^^^^^^^^^^^^^^^^^^^^^

3.2.1 右線形文法と有限オートマトン
''''''''''''''''''''''''''''''''''
正規文法 (regular grammar)
    - G = (V_N, V_T, P, S)
    - P:  X → aY または X → ε     (X,Y ∈ V_N;  a ∈ V_T ∪ {ε})

3.2.2 線形文法 \*
'''''''''''''''''
定理 3.3
    L3 (正規言語=右線形文法) ⊊ L2.5 (線形言語) ⊊ L2 (文脈自由文法)

定理 3.3 の証明
    - AnBn ∉ L3 だが AnBn ∈ L2.5 より L3 ⊊ L2.5
    - 「線形言語に対するポンプの補題」を使って L2.5 ⊊ L2 を示す

    補足

    * #a (uv^{i+1}wx^{i+1}y)
    * = #a (uvwxy) + i | v |      ... v は外に. a ∉ x より #a は x に依らない
    * > #a (uvwxy)                ... v ≠ ε
    * = #b (uvwxy)                ... Lの定義より #a(.) = #b(.)
    * = #b (uv^{i+1}wx^{i+1}y)    ... b ∉ v, x より #b は v, x に依らない


3.5 プッシュダウンオートマトン
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

3.5.2 NPDA: プッシュダウンオートマトン
''''''''''''''''''''''''''''''''''''''

非決定性プッシュダウンオートマトン (nondeterministic pushdown automaton; NPDA)
    M = (Q, Σ, Γ, δ, q0, Z0, F)
    = (Q={状態}, Σ={入力}, Γ={スタック記号}, δ=状態遷移関数, q0=初期状態,
    Z0=初期スタック記号, F={最終状態})

    (1) Q: 有限のアルファベット; 状態 (state) q ∈ Q
    (2) Σ: 有限のアルファベット; 入力記号 (input symbol) a ∈ Σ
    (3) Γ: 有限集合; スタックアルファベット (stack symbol) a ∈ Γ
    (4) δ: Q x (Σ ∪ {ε}) x Γ → Q x Γ^*; 遷移関数 (transition function)
    (5) q0 ∈ Q: 初期状態 (initial state)
    (6) Z0: 初期スタック記号
    (7) F ⊂ Q; 最終状態 (final state) f ∈ F

時点表示 (instantaneous description; ID)
    Q x Σ^* x Γ^* の元
初期 ID (initial ID)
    (q0, x, Z0)

3.5.3 DPDA: 決定性 PDA
''''''''''''''''''''''
CFL であるが，DPDAで受理できない言語

- {a^n b^n, a^n b^{2n} | n >= 1}
- {a^i b^j c^k | i=j or j=k}

3.5.6 NPDA = CFG
''''''''''''''''
定理 3.14
    NPDA の言語受理能力とCFGの言語生成能力は等しい

3.6 CFL の性質
^^^^^^^^^^^^^^

3.6.1 ポンプの補題
''''''''''''''''''

定理 3.16 (CFL に対するポンプの補題)
    L が CFL なら，次の条件を満たす正整数 n が存在する:
    z ∈ L, | z | >= n なら z は z= uvwxy, | uwx | <= n, | ux | >= 1
    と分解でき，任意の i >= 0 に対して uv^iwx^iy ∈ L である．

3.6.2 ポンプの補題の応用と拡張
''''''''''''''''''''''''''''''
AnBnCn := {a^n b^n c^n | n >= 0} が CFL でないことを証明できる


文脈依存言語とその部分クラス
----------------------------

4.1 文脈依存文法と線形有界オートマトン
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

4.1.3 線形有界オートマトン
''''''''''''''''''''''''''

(非決定性) 線形有界オートマトン (linear bounded automaton; LBA)
    M = (Q, Σ, Γ, δ, q0, |¢|, |$|, F)
    = (Q={状態}, Σ={入力}, Γ={スタック記号}, δ=状態遷移関数, q0=初期状態,
    |¢|=左端終止符, |$|=右端終端符, F={最終状態})

    (1) Q: 有限のアルファベット; 状態 (state) q ∈ Q
    (2) Σ: 有限のアルファベット; 入力記号 (input symbol) a ∈ Σ
    (3) Γ: 有限集合; テープ記号 (tape symbol) a ∈ Γ; Σ ⊂ Γ
    (4) δ: Q x |Γ¢$| → 「Q x |Γ¢$| x {-1, 0, 1} の部分集合」;
        遷移関数 (transition function)
    (5) q0 ∈ Q: 初期状態 (initial state)
    (6) |¢|: 左端終止符
    (7) |$|: 右端終端符
    (8) F ⊂ Q; 最終状態 (final state) f ∈ F

|Γ¢$| := Γ ∪ {|¢|, |$|}

.. |¢| replace:: :math:`c \hspace{-0.4em} |`
.. |$| replace:: :math:`\$`
.. |Γ¢$| replace:: :math:`\Gamma_{\$, {c \hspace{-0.4em} |}}`

- 非決定性 LBA = NLBA (単にLBAと言った場合はこちら)
- 決定性 LBA = DLBA

非 CFL AnBnCn' := {a^n b^n c^n | n >=1} を受理する DLAB がある

4.1.4 CSG = NLBA
''''''''''''''''
補題 4.1
    任意の CSG G に対し，G と等価な NLBA M が存在する．


4.2 CSLの性質
^^^^^^^^^^^^^

4.2.2 閉包性
''''''''''''
LBA 問題 (LBA problem)
    NPDA と DPDA の言語受理能力が等しいかどうかという問題．
    未だに未解決．


4.3 文脈依存文法の拡張 \*
^^^^^^^^^^^^^^^^^^^^^^^^^

自然言語研究との関連:

    CFGが自然言語を記述するのに十分な能力をもっているか否かについては
    Chomosky 自信が当初から懐疑的であった．すなわち，「文法的に正しい
    形をした分の構造をCFGで記述できるか」という問題を Chomosky は 1956年
    の論文で提起したが，その後， Chomosky 自身を含む多くの研究者によって
    比定例が数多く示された．例えば，スイスのドイツ語では対角の名詞句
    (NPaで表す)は必ず与格の名詞句(NPdで表す)より前に来るし，対格を伴う
    同士(Vaで表す)は必ず与格を伴う動詞(Vdで表す)より前に来て，しかも
    それらの個数が一致する．すなわち，こういった動詞を何重にも含んだ文は
    (NPa)^m(NPd)^n(Va)^m(Vd)^n という形をしていなければならないが，この事実
    はCFGで表すことができない({a^m b^n c^m d^n | m,n >= 1} はCFGでない)．

    --- 形式言語とオートマトン (守屋) p232


チューリング機械と句構造文法
----------------------------

チューリング機械と計算量
^^^^^^^^^^^^^^^^^^^^^^^^

5.1.1 LBA を一般化すると
''''''''''''''''''''''''


線形有界オートマトン (linear bounded automaton; LBA)
    M = (Q, Σ, Γ, δ, q0, F)
    = (Q={状態}, Σ={入力}, Γ={テープアルファベット}, δ=遷移関数, q0=初期状態,
    F={最終状態})

    (1) Q: 有限のアルファベット; 状態 (state) q ∈ Q
    (2) Σ: 有限のアルファベット; 入力記号 (input symbol) a ∈ Σ
    (3) Γ: 有限のアルファベッ; テープアルファベット (tape alphabet) a ∈ Γ;
        Σ ⊂ Γ
    (4) δ: Q x Γ → 2^{Q x Γ x {-1, 0, 1}}; 遷移関数 (transition function)
    (5) q0 ∈ Q: 初期状態 (initial state)
    (6) F ⊂ Q; 最終状態 (final state) f ∈ F

5.1.3 Chomosky 階層と計算量
'''''''''''''''''''''''''''
定理 5.3
    - (3) L3 = DSPACE(1) = NSPACE(1)
    - (2.5) L2.5 ⊊ DTIME(n^2) ∩ DSPACE(log n)
    - (2) L2 ⊊ DTIME(n^3)
    - (1.5) L1.5 ⊊ DTIME(n^6)
    - (1) L1 = NSPACE(n)
    - (0) L0 = L(NTM) = L(DTM)


5.2 決定問題 \*
^^^^^^^^^^^^^^^

5.2.1 帰納的言語と帰納的可算言語
''''''''''''''''''''''''''''''''

停止性TM (halting TM)
    どんな入力に対しても必ず停止するTM

帰納的言語 (recursive language, L0.5)
    停止性TMによって受理される言語

帰納的言語 (recursive enumerable language, L0)
    一般のTMによって受理される言語

定理 5.5
    帰納的言語でない帰納的可算言語が存在する

- 定理 5.5より， L0.5 ⊊ L0
- 定理 5.5 の証明に 万能TM (universal TM) が出てくる


5.3 0型言語の性質 \*
^^^^^^^^^^^^^^^^^^^^

5.3.1 準同型写像による特徴付け
''''''''''''''''''''''''''''''

定理 5.11
    CSL(1型言語) でない帰納的言語(0.5型言語)が存在する．
    すなわち， L1 ⊊ L0.5


リンク
------

- `守屋悦朗 形式言語とオートマトン
  <http://www.edu.waseda.ac.jp/~moriya/education/books/LA/>`_

  - http://www.edu.waseda.ac.jp/~moriya/education/books/LA/exercise1.pdf
  - http://www.edu.waseda.ac.jp/~moriya/education/books/LA/exercise2.pdf
  - http://www.edu.waseda.ac.jp/~moriya/education/books/LA/exercise3.pdf
  - http://www.edu.waseda.ac.jp/~moriya/education/books/LA/exercise4.pdf
  - http://www.edu.waseda.ac.jp/~moriya/education/books/LA/exercise5.pdf
  - http://www.edu.waseda.ac.jp/~moriya/education/books/LA/references.pdf
  - http://www.edu.waseda.ac.jp/~moriya/education/books/LA/books.pdf
  - `エラー訂正
    <http://www.edu.waseda.ac.jp/~moriya/education/books/LA/correction.html>`_

